import java.util.Properties

plugins {
    kotlin("jvm")
}

dependencies {
    compileOnly(libs.paper.api)
    compileOnly(libs.vault) {
        exclude(group = "org.bukkit", module = "bukkit")
    }
    implementation(libs.sqlite.jdbc)
}

tasks.register("generateVersionProperties") {
    val propsFile = layout.buildDirectory.file("generated/version/version.properties")
    outputs.file(propsFile) // 이 task의 결과물이 어떤 파일인지 Gradle에 알려줍니다.

    doLast {
        val properties = Properties()
        // toml 파일의 [versions] 섹션에 있는 키를 사용합니다.
        properties.setProperty("exposed", libs.versions.exposed.get())
        properties.setProperty("serialization", libs.versions.serialization.get())
        properties.setProperty("coroutines", libs.versions.coroutines.get())
        properties.setProperty("kotlin", libs.versions.kotlin.get())
        properties.setProperty("hikaricp", libs.versions.hikaricp.get())
        properties.setProperty("mariadb", libs.versions.mariadb.get())
        properties.setProperty("sqlite", libs.versions.sqlite.get())
        // 생성될 파일에 내용을 씁니다.
        propsFile.get().asFile.writer().use { writer ->
            properties.store(writer, "Generated by Gradle from libs.versions.toml")
        }
    }
}
tasks.processResources {
    val props = mapOf("version" to version)
    inputs.properties(props)
    filteringCharset = "UTF-8"
    filesMatching("paper-plugin.yml") {
        expand(props)
    }
    dependsOn(tasks.named("generateVersionProperties"))
    // 생성된 파일이 있는 디렉토리를 리소스에 포함시킵니다.
    from(tasks.named("generateVersionProperties").map { it.outputs })
}
tasks.build {
    dependsOn("spotlessApply")
    finalizedBy("deployFile")
}
tasks.register<Exec>("deployFile") {
    val user = "doka1203"
    val host = "192.168.0.113"
    val remotePath = "/home/doka1203/servers/dokacraft-paper-1/plugins/ShoppyX.jar"
    val localFile = layout.projectDirectory.file("build/libs/papermc.jar").asFile
    // println("Using local file: ${localFile.absolutePath}")
    commandLine("scp", "-P", "22222", localFile.absolutePath, "$user@$host:$remotePath")
}
